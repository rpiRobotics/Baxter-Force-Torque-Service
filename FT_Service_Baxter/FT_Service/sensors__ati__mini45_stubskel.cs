//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace sensors.ati.mini45
{
public class sensors__ati__mini45Factory : ServiceFactory
{
    public override string DefString()
{
    const string d=@"service sensors.ati.mini45

option version 0.5

struct FTData
    field int64 time
    field double[] ft_data
end struct

object ATImini45Host
	objref ATImini45[] ft
end object

object ATImini45
	pipe FTData FTDataStream
	property double[6] wrench
	property uint8 recording_data
	function void changeCalibration(uint8 config)
	function void bias()
	function void startRecordingData(string filename)
	function void stopRecordingData()
end object

";
    return d;
    }
    public override string GetServiceName() {return "sensors.ati.mini45";}
    public FTData_stub FTData_stubentry;
    public sensors__ati__mini45Factory()
{
    FTData_stubentry=new FTData_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    string objshort=RemovePath(objecttype);
    if (objshort=="FTData")    return FTData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override MessageElementStructure PackStructure(Object s) {
    if (s==null) return null;
    string objtype=s.GetType().ToString();
    if (RobotRaconteurNode.SplitQualifiedName(objtype)[0].TrimEnd(new char[] {'_'}) == "sensors.ati.mini45") {
    string objshort=RemovePath(objtype);
    switch (objshort) {
    case "FTData":
    return  FTData_stubentry.PackStructure(s);
    default:
    break;
    }
    } else {
    return RobotRaconteurNode.s.PackStructure(s);
    }
    throw new Exception();
    }
    public override T UnpackStructure<T>(MessageElementStructure l) {
    if (l==null) return default(T);
    if (RobotRaconteurNode.SplitQualifiedName(l.Type)[0].TrimEnd(new char[] {'_'}) == "sensors.ati.mini45") {
    string objshort=RemovePath(l.Type);
    switch (objshort) {
    case "FTData":
    return  FTData_stubentry.UnpackStructure<T>(l);
    default:
    break;
    }
    } else {
    return RobotRaconteurNode.s.UnpackStructure<T>(l);
    }
    throw new DataTypeException("Could not unpack structure");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    if (RobotRaconteurNode.SplitQualifiedName(objecttype)[0].TrimEnd(new char[] {'_'}) == "sensors.ati.mini45") {
    string objshort=RemovePath(objecttype);
    switch (objshort) {
    case "ATImini45Host":
    return new ATImini45Host_stub(innerstub);
    case "ATImini45":
    return new ATImini45_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype)[0].TrimEnd(new char[] {'_'});
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype=ServiceSkelUtil.UnfixName(ServiceSkelUtil.FindParentInterface(obj.GetType()).ToString());
    if (RobotRaconteurNode.SplitQualifiedName(objtype.ToString())[0].TrimEnd(new char[] {'_'}) == "sensors.ati.mini45") {
    string sobjtype=RemovePath(objtype);
    switch(sobjtype) {
    case "ATImini45Host":
    return new ATImini45Host_skel((ATImini45Host)obj);
    case "ATImini45":
    return new ATImini45_skel((ATImini45)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype.ToString())[0].TrimEnd(new char[] {'_'});
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string[] rr_stype = RobotRaconteurNode.SplitQualifiedName(rr_type);
    if (rr_stype[0] != "sensors.ati.mini45") return RobotRaconteurNode.s.DownCastException(rr_exp);
    return rr_exp;
    }
}

public class FTData_stub : IStructureStub {
    public FTData_stub(sensors__ati__mini45Factory d) {def=d;}
    private sensors__ati__mini45Factory def;
    public MessageElementStructure PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FTData s = (FTData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("time",new long[] {s.time}));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("ft_data",s.ft_data));
    return new MessageElementStructure("sensors.ati.mini45.FTData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FTData s=new FTData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.time =(MessageElementUtil.CastDataAndDispose<long[]>(MessageElement.FindElement(mm,"time")))[0];
    s.ft_data =MessageElementUtil.CastDataAndDispose<double[]>(MessageElement.FindElement(mm,"ft_data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_ATImini45Host
{
    void async_get_ft(int ind, Action<ATImini45,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ATImini45Host_stub : ServiceStub , ATImini45Host, async_ATImini45Host{
    public ATImini45Host_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public ATImini45 get_ft(int ind) {
    return (ATImini45)FindObjRefTyped("ft",ind.ToString(),"sensors.ati.mini45.ATImini45");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public void async_get_ft(int ind, Action<ATImini45,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("ft",ind.ToString(),"sensors.ati.mini45.ATImini45",handler,timeout);
    }
}
public interface async_ATImini45
{
    void async_get_wrench(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_wrench(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_recording_data(Action<byte,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_recording_data(byte value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_changeCalibration(byte config,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_bias(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_startRecordingData(string filename,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_stopRecordingData(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ATImini45_stub : ServiceStub , ATImini45, async_ATImini45{
    private Pipe<FTData> rr_FTDataStream;
    public ATImini45_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_FTDataStream=new Pipe<FTData>(innerstub.GetPipe("FTDataStream"));
    }
    public double[] wrench {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("wrench"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("wrench", m);
    }
    }
    }
    public byte recording_data {
    get {
    return (MessageElementUtil.CastDataAndDispose<byte[]>(rr_innerstub.PropertyGet("recording_data")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new byte[] {value}))
    {
    rr_innerstub.PropertySet("recording_data", m);
    }
    }
    }
    public void changeCalibration(byte config) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("config",new byte[] {config}));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("changeCalibration",rr_param))
    {
    }
    }
    }
    public void bias() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("bias",rr_param))
    {
    }
    }
    }
    public void startRecordingData(string filename) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("filename",filename));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("startRecordingData",rr_param))
    {
    }
    }
    }
    public void stopRecordingData() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("stopRecordingData",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<FTData> FTDataStream {
    get { return rr_FTDataStream;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_wrench(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("wrench",rrend_async_get_wrench,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_wrench(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(null,err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(null,err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_wrench(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("wrench",mm,rrend_async_set_wrench,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_wrench(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_recording_data(Action<byte,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("recording_data",rrend_async_get_recording_data,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_recording_data(MessageElement value ,Exception err,object param)
    {
    Action<byte,Exception> rr_handler=(Action<byte,Exception>)param;
    if (err!=null)
    {
    rr_handler(0,err);
    return;
    }
    byte rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<byte[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(0,err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_recording_data(byte value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new byte[] {value}))
    {
    rr_async_PropertySet("recording_data",mm,rrend_async_set_recording_data,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_recording_data(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_changeCalibration(byte config,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("config",new byte[] {config}));
    rr_async_FunctionCall("changeCalibration",rr_param,rrend_async_changeCalibration,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_changeCalibration(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_bias(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("bias",rr_param,rrend_async_bias,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_bias(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_startRecordingData(string filename,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("filename",filename));
    rr_async_FunctionCall("startRecordingData",rr_param,rrend_async_startRecordingData,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_startRecordingData(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_stopRecordingData(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("stopRecordingData",rr_param,rrend_async_stopRecordingData,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_stopRecordingData(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
}
public class ATImini45Host_skel : ServiceSkel {
    protected ATImini45Host obj;
    public ATImini45Host_skel(object o) : base(o) { obj=(ATImini45Host)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "ft": {
    return obj.get_ft(Int32.Parse(ind));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ATImini45Host)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ATImini45Host)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ATImini45Host)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ATImini45Host)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ATImini45Host)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "sensors.ati.mini45.ATImini45Host"; } }
}
public class ATImini45_skel : ServiceSkel {
    protected ATImini45 obj;
    public ATImini45_skel(object o) : base(o) { obj=(ATImini45)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "wrench":
    {
    double[] ret=obj.wrench;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "recording_data":
    {
    byte ret=obj.recording_data;
    return MessageElementUtil.NewMessageElementDispose("return",new byte[] {ret});
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "wrench":
    {
    obj.wrench=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    case "recording_data":
    {
    obj.recording_data=(MessageElementUtil.CastDataAndDispose<byte[]>(m))[0];
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "changeCalibration":
    {
    byte config=(MessageElementUtil.CastDataAndDispose<byte[]>(vectorptr_messageelement_util.FindElement(rr_m,"config")))[0];
    this.obj.changeCalibration(config);
    return new MessageElement("return",(int)0);
    }
    case "bias":
    {
    this.obj.bias();
    return new MessageElement("return",(int)0);
    }
    case "startRecordingData":
    {
    string filename=MessageElementUtil.CastDataAndDispose<string>(vectorptr_messageelement_util.FindElement(rr_m,"filename"));
    this.obj.startRecordingData(filename);
    return new MessageElement("return",(int)0);
    }
    case "stopRecordingData":
    {
    this.obj.stopRecordingData();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ATImini45)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ATImini45)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ATImini45)rrobj1;
    obj.FTDataStream=new Pipe<FTData>(innerskel.GetPipe("FTDataStream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ATImini45)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ATImini45)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "sensors.ati.mini45.ATImini45"; } }
}
public static class RRExtensions{
    public static Task<ATImini45> async_get_ft(this async_ATImini45Host rr_obj, int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<ATImini45> t=new RobotRaconteurTaskCompletion<ATImini45>();
    rr_obj.async_get_ft(ind,t.handler,timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_wrench(this async_ATImini45 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_wrench(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_wrench(this async_ATImini45 rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_wrench(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<byte> async_get_recording_data(this async_ATImini45 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<byte> t=new RobotRaconteurTaskCompletion<byte>();
    rr_obj.async_get_recording_data(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_recording_data(this async_ATImini45 rr_obj, byte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_recording_data(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_changeCalibration(this async_ATImini45 rr_obj,byte config,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_changeCalibration(config,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_bias(this async_ATImini45 rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_bias(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_startRecordingData(this async_ATImini45 rr_obj,string filename,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_startRecordingData(filename,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_stopRecordingData(this async_ATImini45 rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_stopRecordingData(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
}
}
